generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id         Int       @id @default(autoincrement())
    userId     Int
    provider   String
    providerId String
    updatedAt  DateTime? @db.Timestamp(6)
    createdAt  DateTime  @db.Timestamp(6)
    user       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([providerId])
    @@index([provider])
    @@index([userId])
}

model Authority {
    id              Int             @id @default(autoincrement())
    name            String          @unique
    description     String
    updatedAt       DateTime?       @db.Timestamp(6)
    createdAt       DateTime        @db.Timestamp(6)
    userAuthorities UserAuthority[]

    @@index([name])
}

model Category {
    id              Int            @id @default(autoincrement())
    name            String         @unique
    description     String
    parentId        Int?
    updatedAt       DateTime?      @db.Timestamp(6)
    createdAt       DateTime       @db.Timestamp(6)
    parentCategory  Category?      @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    childCategories Category[]     @relation("CategoryToCategory")
    postCategories  PostCategory[]

    @@index([name])
    @@index([parentId])
}

model FavoritePost {
    userId    Int
    postId    Int
    createdAt DateTime @db.Timestamp(6)
    post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([userId, postId])
    @@index([postId])
    @@index([userId])
}

model Package {
    id           Int          @id @default(autoincrement())
    postId       Int
    title        String
    description  String?
    revision     Int?         @default(0)
    deliveryTime Int?
    durationType DurationType
    price        Decimal      @db.Money
    special      Json?        @db.Json
    updatedAt    DateTime?    @db.Timestamp(6)
    createdAt    DateTime     @db.Timestamp(6)
    post         Post         @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([postId, title])
}

model Post {
    id                    Int                   @id @default(autoincrement())
    userId                Int
    title                 String
    content               String
    stars                 Int?                  @default(0)
    favorites             Int?                  @default(0)
    thumbnail             String
    updatedAt             DateTime?             @db.Timestamp(6)
    createdAt             DateTime              @db.Timestamp(6)
    favoritePosts         FavoritePost[]
    orders                Order[]
    packages              Package[]
    user                  User                  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    postBrowsingHistories PostBrowsingHistory[]
    postCategories        PostCategory[]
    postImages            PostImage[]
    postTags              PostTag[]
    previews              Preview[]
}

model PostCategory {
    postId     Int
    categoryId Int
    createdAt  DateTime @db.Timestamp(6)
    category   Category @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    post       Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([postId, categoryId])
    @@index([categoryId])
    @@index([postId])
}

model PostImage {
    id        Int      @id @default(autoincrement())
    postId    Int
    link      String
    createdAt DateTime @db.Timestamp(6)
    post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([postId])
}

model PostTag {
    tagId     Int
    postId    Int
    createdAt DateTime @db.Timestamp(6)
    post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    tag       Tag      @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([tagId, postId])
    @@index([postId])
    @@index([tagId])
}

model Preview {
    userId    Int
    postId    Int
    star      Int
    comment   String
    createdAt DateTime @db.Timestamp(6)
    post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([userId, postId])
    @@index([postId])
    @@index([userId])
}

model Role {
    id          Int        @id @default(autoincrement())
    name        String     @unique
    description String
    updatedAt   DateTime?  @db.Timestamp(6)
    createdAt   DateTime   @db.Timestamp(6)
    userRoles   UserRole[]

    @@index([name])
}

model Tag {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    updatedAt   DateTime? @db.Timestamp(6)
    createdAt   DateTime  @db.Timestamp(6)
    postTags    PostTag[]

    @@index([name])
}

model User {
    id            Int             @id @default(autoincrement())
    username      String
    about         String
    updatedAt     DateTime?       @db.Timestamp(6)
    createdAt     DateTime        @db.Timestamp(6)
    avatar        String?
    accounts      Account[]
    favoritePosts FavoritePost[]
    posts         Post[]
    previews      Preview[]
    authorities   UserAuthority[]
    roles         UserRole[]
}

model UserAuthority {
    userId      Int
    authorityId Int
    createdAt   DateTime  @db.Timestamp(6)
    authority   Authority @relation(fields: [authorityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user        User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([userId, authorityId])
    @@index([authorityId])
    @@index([userId])
}

model UserRole {
    userId    Int
    roleId    Int
    createdAt DateTime @db.Timestamp(6)
    role      Role     @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([userId, roleId])
    @@index([roleId])
    @@index([userId])
}

model Order {
    id           Int          @id @default(autoincrement())
    postId       Int
    title        String
    description  String?
    revision     Int?         @default(0)
    deliveryTime DateTime     @db.Time(6)
    price        Decimal      @db.Money
    special      Json?        @db.Json
    status       OrderStatus? @default(Pending)
    createdAt    DateTime     @db.Timestamp(6)
    post         Post         @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([postId])
    @@index([status])
}

model PostBrowsingHistory {
    id        Int      @id @default(autoincrement())
    postId    Int
    createdAt DateTime @db.Timestamp(6)
    post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Skill {
    id            Int           @id @default(autoincrement())
    categoryId    Int
    name          String
    description   String
    updatedAt     DateTime?     @db.Timestamp(6)
    createdAt     DateTime      @db.Timestamp(6)
    skillCategory SkillCategory @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([categoryId])
    @@index([name])
}

model SkillCategory {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    updatedAt   DateTime? @db.Timestamp(6)
    createdAt   DateTime  @db.Timestamp(6)
    skills      Skill[]

    @@index([name])
}

enum OrderStatus {
    Pending
    Accepted
    Rejected
}

enum DurationType {
    Hour
    Day
    Week
    Month
    Year
}
